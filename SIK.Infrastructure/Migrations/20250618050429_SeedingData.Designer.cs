// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIK.Infrastructure.Data;

#nullable disable

namespace SIK.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250618050429_SeedingData")]
    partial class SeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.RealEstate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("AreaInSqrMeters")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MarketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("YearOfConstruction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RealEstates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adress = "123 Main Street, Sofia, Bulgaria",
                            AreaInSqrMeters = 120.5,
                            MarketPrice = 250000.00m,
                            YearOfConstruction = 2010
                        },
                        new
                        {
                            Id = 2,
                            Adress = "45 Coastal Road, Varna, Bulgaria",
                            AreaInSqrMeters = 95.0,
                            MarketPrice = 320000.00m,
                            YearOfConstruction = 2018
                        },
                        new
                        {
                            Id = 3,
                            Adress = "7 Mountain View, Bansko, Bulgaria",
                            AreaInSqrMeters = 85.0,
                            MarketPrice = 180000.00m,
                            YearOfConstruction = 2005
                        },
                        new
                        {
                            Id = 4,
                            Adress = "22 Central Square, Plovdiv, Bulgaria",
                            AreaInSqrMeters = 150.0,
                            MarketPrice = 290000.00m,
                            YearOfConstruction = 2015
                        },
                        new
                        {
                            Id = 5,
                            Adress = "15 Riverside, Ruse, Bulgaria",
                            AreaInSqrMeters = 110.0,
                            MarketPrice = 210000.00m,
                            YearOfConstruction = 2020
                        });
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.RealEstateOwnership", b =>
                {
                    b.Property<int>("RealEstateId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateAcquired")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("OwnershipPercentage")
                        .HasColumnType("float");

                    b.HasKey("RealEstateId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RealEstatesOwnerships");

                    b.HasData(
                        new
                        {
                            RealEstateId = 1,
                            UserId = 5,
                            DateAcquired = new DateOnly(2023, 6, 18),
                            Id = 1,
                            OwnershipPercentage = 100.0
                        },
                        new
                        {
                            RealEstateId = 2,
                            UserId = 6,
                            DateAcquired = new DateOnly(2023, 12, 18),
                            Id = 2,
                            OwnershipPercentage = 100.0
                        },
                        new
                        {
                            RealEstateId = 3,
                            UserId = 7,
                            DateAcquired = new DateOnly(2024, 6, 18),
                            Id = 3,
                            OwnershipPercentage = 100.0
                        },
                        new
                        {
                            RealEstateId = 4,
                            UserId = 8,
                            DateAcquired = new DateOnly(2024, 9, 18),
                            Id = 4,
                            OwnershipPercentage = 100.0
                        },
                        new
                        {
                            RealEstateId = 5,
                            UserId = 9,
                            DateAcquired = new DateOnly(2024, 12, 18),
                            Id = 5,
                            OwnershipPercentage = 100.0
                        });
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("LastChanged")
                        .HasColumnType("date");

                    b.Property<decimal>("PricePerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RealEstateId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<int>("SignatoryId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Signed")
                        .HasColumnType("date");

                    b.Property<int?>("TransportAssetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RealEstateId");

                    b.HasIndex("SignatoryId");

                    b.HasIndex("TransportAssetId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Comprehensive auto insurance",
                            LastChanged = new DateOnly(2025, 5, 18),
                            PricePerMonth = 120.00m,
                            ServiceType = 1,
                            SignatoryId = 2,
                            Signed = new DateOnly(2024, 6, 18),
                            TransportAssetId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Motorcycle full coverage",
                            LastChanged = new DateOnly(2025, 6, 18),
                            PricePerMonth = 85.00m,
                            ServiceType = 1,
                            SignatoryId = 3,
                            Signed = new DateOnly(2024, 12, 18),
                            TransportAssetId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "GPS tracking system subscription",
                            LastChanged = new DateOnly(2025, 6, 18),
                            PricePerMonth = 45.00m,
                            ServiceType = 0,
                            SignatoryId = 4,
                            Signed = new DateOnly(2025, 3, 18),
                            TransportAssetId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Property damage insurance for Sofia apartment",
                            LastChanged = new DateOnly(2025, 3, 18),
                            PricePerMonth = 250.00m,
                            RealEstateId = 1,
                            ServiceType = 1,
                            SignatoryId = 5,
                            Signed = new DateOnly(2023, 6, 18)
                        },
                        new
                        {
                            Id = 5,
                            Description = "Security system for Varna beach house",
                            LastChanged = new DateOnly(2025, 4, 18),
                            PricePerMonth = 180.00m,
                            RealEstateId = 2,
                            ServiceType = 0,
                            SignatoryId = 6,
                            Signed = new DateOnly(2023, 12, 18)
                        },
                        new
                        {
                            Id = 6,
                            Description = "Ski chalet insurance in Bansko",
                            LastChanged = new DateOnly(2025, 6, 18),
                            PricePerMonth = 150.00m,
                            RealEstateId = 3,
                            ServiceType = 1,
                            SignatoryId = 7,
                            Signed = new DateOnly(2024, 6, 18)
                        },
                        new
                        {
                            Id = 7,
                            Description = "Plovdiv city center property security",
                            LastChanged = new DateOnly(2025, 6, 18),
                            PricePerMonth = 200.00m,
                            RealEstateId = 4,
                            ServiceType = 0,
                            SignatoryId = 8,
                            Signed = new DateOnly(2024, 9, 18)
                        },
                        new
                        {
                            Id = 8,
                            Description = "Ruse riverside apartment insurance",
                            LastChanged = new DateOnly(2025, 6, 18),
                            PricePerMonth = 175.00m,
                            RealEstateId = 5,
                            ServiceType = 1,
                            SignatoryId = 9,
                            Signed = new DateOnly(2024, 12, 18)
                        });
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.TransportAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("TransportAssets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Reliable sedan with great fuel economy",
                            Name = "Toyota Camry",
                            OwnerId = 2,
                            Price = 22000.00m,
                            Type = 0,
                            YearOfManufacture = 2018
                        },
                        new
                        {
                            Id = 2,
                            Description = "Classic American cruiser motorcycle",
                            Name = "Harley-Davidson Sportster",
                            OwnerId = 3,
                            Price = 12500.00m,
                            Type = 2,
                            YearOfManufacture = 2020
                        },
                        new
                        {
                            Id = 3,
                            Description = "24-foot luxury bowrider",
                            Name = "Sea Ray Sundancer",
                            OwnerId = 4,
                            Price = 45000.00m,
                            Type = 8,
                            YearOfManufacture = 2015
                        },
                        new
                        {
                            Id = 4,
                            Description = "Full-size pickup truck, 4WD",
                            Name = "Ford F-150",
                            OwnerId = 5,
                            Price = 35000.00m,
                            Type = 1,
                            YearOfManufacture = 2019
                        },
                        new
                        {
                            Id = 5,
                            Description = "Electric vehicle with autopilot",
                            Name = "Tesla Model 3",
                            OwnerId = 6,
                            Price = 48000.00m,
                            Type = 0,
                            YearOfManufacture = 2021
                        });
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleated")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a4ded1c-d813-4fcb-9e00-68efc7cf724d",
                            CreatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8840),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsDeleated = false,
                            LastName = "User",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8840),
                            LockoutEnabled = false,
                            MiddleName = "System",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "278e0166-1837-4f02-b02e-cb45aae652a4",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db0f1d2c-3016-498d-bd3f-f9a76350b119",
                            CreatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8903),
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            IsDeleated = false,
                            LastName = "Doe",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8903),
                            LockoutEnabled = false,
                            MiddleName = "Michael",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6414ca0a-e961-47c5-85a6-3348cef9e3d0",
                            TwoFactorEnabled = false,
                            UserName = "john.doe@example.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8196f3be-b108-45d1-869b-2d9cbaf57158",
                            CreatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8918),
                            DateOfBirth = new DateTime(1985, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            IsDeleated = false,
                            LastName = "Smith",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8919),
                            LockoutEnabled = false,
                            MiddleName = "Elizabeth",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57344615-1722-4178-a3aa-bf816ed77902",
                            TwoFactorEnabled = false,
                            UserName = "jane.smith@example.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eeaab2df-5f50-42b9-ae30-2fc03b592dc6",
                            CreatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8926),
                            DateOfBirth = new DateTime(1978, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "robert.johnson@example.com",
                            EmailConfirmed = false,
                            FirstName = "Robert",
                            IsDeleated = false,
                            LastName = "Johnson",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8926),
                            LockoutEnabled = false,
                            MiddleName = "Lee",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58737cc9-fa0e-4cdd-b0a2-d597e6fdd536",
                            TwoFactorEnabled = false,
                            UserName = "robert.johnson@example.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "004e1295-f3d7-4724-ae04-bbcb6c9b02ad",
                            CreatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8938),
                            DateOfBirth = new DateTime(1992, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily.wilson@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            IsDeleated = false,
                            LastName = "Wilson",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8938),
                            LockoutEnabled = false,
                            MiddleName = "Grace",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10bfba81-5b28-4ceb-a100-b07904fcf3c0",
                            TwoFactorEnabled = false,
                            UserName = "emily.wilson@example.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56f6ba17-7edf-44fe-908a-43ef728d955b",
                            CreatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8947),
                            DateOfBirth = new DateTime(1987, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michael.brown@example.com",
                            EmailConfirmed = false,
                            FirstName = "Michael",
                            IsDeleated = false,
                            LastName = "Brown",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8947),
                            LockoutEnabled = false,
                            MiddleName = "James",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3fe81a8-ce39-4e18-b71a-7a7fe34857fd",
                            TwoFactorEnabled = false,
                            UserName = "michael.brown@example.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69294454-f4fd-4477-a7c2-4435a3e4e23c",
                            CreatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8960),
                            DateOfBirth = new DateTime(1995, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sarah.davis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sarah",
                            IsDeleated = false,
                            LastName = "Davis",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8960),
                            LockoutEnabled = false,
                            MiddleName = "Anne",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97c620d1-2d98-4992-9603-416906631fdb",
                            TwoFactorEnabled = false,
                            UserName = "sarah.davis@example.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec8243e8-e4f1-4389-bb63-aee7ca8e9e49",
                            CreatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8969),
                            DateOfBirth = new DateTime(1983, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.miller@example.com",
                            EmailConfirmed = false,
                            FirstName = "David",
                            IsDeleated = false,
                            LastName = "Miller",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8969),
                            LockoutEnabled = false,
                            MiddleName = "Paul",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57bc68d2-d19a-4944-8391-c4a4448e32db",
                            TwoFactorEnabled = false,
                            UserName = "david.miller@example.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "faaa0bd6-abcc-49b0-bba4-c721efc6f23c",
                            CreatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8976),
                            DateOfBirth = new DateTime(1991, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lisa.moore@example.com",
                            EmailConfirmed = false,
                            FirstName = "Lisa",
                            IsDeleated = false,
                            LastName = "Moore",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8977),
                            LockoutEnabled = false,
                            MiddleName = "Marie",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d02082a2-24aa-4ce1-9ed9-c34600297e8b",
                            TwoFactorEnabled = false,
                            UserName = "lisa.moore@example.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff2bcd77-2796-4aa3-a363-73ef39f04693",
                            CreatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8986),
                            DateOfBirth = new DateTime(1975, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "james.taylor@example.com",
                            EmailConfirmed = false,
                            FirstName = "James",
                            IsDeleated = false,
                            LastName = "Taylor",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 5, 4, 29, 93, DateTimeKind.Utc).AddTicks(8986),
                            LockoutEnabled = false,
                            MiddleName = "William",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47140852-aab1-4f80-ba30-e0f00a0616e6",
                            TwoFactorEnabled = false,
                            UserName = "james.taylor@example.com"
                        });
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.RealEstateOwnership", b =>
                {
                    b.HasOne("SIK.Infrastructure.Data.Models.RealEstate", "RealEstate")
                        .WithMany("Owners")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIK.Infrastructure.Data.Models.User", "Owner")
                        .WithMany("OwnedProperties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.Service", b =>
                {
                    b.HasOne("SIK.Infrastructure.Data.Models.RealEstate", "RealEstate")
                        .WithMany()
                        .HasForeignKey("RealEstateId");

                    b.HasOne("SIK.Infrastructure.Data.Models.User", "Signatory")
                        .WithMany("Services")
                        .HasForeignKey("SignatoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIK.Infrastructure.Data.Models.TransportAsset", "TransportAsset")
                        .WithMany()
                        .HasForeignKey("TransportAssetId");

                    b.Navigation("RealEstate");

                    b.Navigation("Signatory");

                    b.Navigation("TransportAsset");
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.TransportAsset", b =>
                {
                    b.HasOne("SIK.Infrastructure.Data.Models.User", "Owner")
                        .WithMany("TransportAssets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.RealEstate", b =>
                {
                    b.Navigation("Owners");
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("OwnedProperties");

                    b.Navigation("Services");

                    b.Navigation("TransportAssets");
                });
#pragma warning restore 612, 618
        }
    }
}
