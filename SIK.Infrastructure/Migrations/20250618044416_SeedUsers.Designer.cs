// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIK.Infrastructure.Data;

#nullable disable

namespace SIK.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250618044416_SeedUsers")]
    partial class SeedUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.RealEstate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("AreaInSqrMeters")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MarketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("YearOfConstruction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RealEstates");
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.RealEstateOwnership", b =>
                {
                    b.Property<int>("RealEstateId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateAcquired")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("OwnershipPercentage")
                        .HasColumnType("float");

                    b.HasKey("RealEstateId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RealEstatesOwnerships");
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("LastChanged")
                        .HasColumnType("date");

                    b.Property<decimal>("PricePerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RealEstateId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<int>("SignatoryId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Signed")
                        .HasColumnType("date");

                    b.Property<int?>("TransportAssetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RealEstateId");

                    b.HasIndex("SignatoryId");

                    b.HasIndex("TransportAssetId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.TransportAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("TransportAssets");
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleated")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09d02b36-3fd4-4271-9388-47c36bb3403f",
                            CreatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4174),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsDeleated = false,
                            LastName = "User",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4174),
                            LockoutEnabled = false,
                            MiddleName = "System",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9f14a7d4-ff63-41e5-a0ac-d9fa72135556",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ae170c9-1c11-479e-a5c5-4aa032c2f195",
                            CreatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4187),
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            IsDeleated = false,
                            LastName = "Doe",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4187),
                            LockoutEnabled = false,
                            MiddleName = "Michael",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34ab1853-754e-41af-b92f-6a473fdf1681",
                            TwoFactorEnabled = false,
                            UserName = "john.doe@example.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43822928-aba3-4878-a60a-82ad67271499",
                            CreatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4193),
                            DateOfBirth = new DateTime(1985, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            IsDeleated = false,
                            LastName = "Smith",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4194),
                            LockoutEnabled = false,
                            MiddleName = "Elizabeth",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87758602-0636-4ed2-b968-147ca26a6d71",
                            TwoFactorEnabled = false,
                            UserName = "jane.smith@example.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d048cc2-aa4e-482f-9c99-61495abb9c46",
                            CreatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4202),
                            DateOfBirth = new DateTime(1978, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "robert.johnson@example.com",
                            EmailConfirmed = false,
                            FirstName = "Robert",
                            IsDeleated = false,
                            LastName = "Johnson",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4202),
                            LockoutEnabled = false,
                            MiddleName = "Lee",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51897d4a-35e1-4d93-8339-e374ed5cd6e7",
                            TwoFactorEnabled = false,
                            UserName = "robert.johnson@example.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12b24db0-7f4d-41fe-9c1d-a86a280f0422",
                            CreatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4254),
                            DateOfBirth = new DateTime(1992, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily.wilson@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            IsDeleated = false,
                            LastName = "Wilson",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4255),
                            LockoutEnabled = false,
                            MiddleName = "Grace",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98614188-2db6-4ee5-8feb-77471a865f33",
                            TwoFactorEnabled = false,
                            UserName = "emily.wilson@example.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e94be6b-1f5e-416e-9d51-72343906eed4",
                            CreatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4267),
                            DateOfBirth = new DateTime(1987, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michael.brown@example.com",
                            EmailConfirmed = false,
                            FirstName = "Michael",
                            IsDeleated = false,
                            LastName = "Brown",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4267),
                            LockoutEnabled = false,
                            MiddleName = "James",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5699cb4a-c099-49c2-8f22-80ad9be4d972",
                            TwoFactorEnabled = false,
                            UserName = "michael.brown@example.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0bdab2ef-3474-4b28-81ec-46259aa6debe",
                            CreatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4274),
                            DateOfBirth = new DateTime(1995, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sarah.davis@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sarah",
                            IsDeleated = false,
                            LastName = "Davis",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4274),
                            LockoutEnabled = false,
                            MiddleName = "Anne",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dabddecb-f3db-4a05-83a9-80b3f21ad567",
                            TwoFactorEnabled = false,
                            UserName = "sarah.davis@example.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7f02981-e06a-4eba-b7df-95d274144768",
                            CreatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4280),
                            DateOfBirth = new DateTime(1983, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.miller@example.com",
                            EmailConfirmed = false,
                            FirstName = "David",
                            IsDeleated = false,
                            LastName = "Miller",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4281),
                            LockoutEnabled = false,
                            MiddleName = "Paul",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8330541-e645-412b-bf3f-178f11208713",
                            TwoFactorEnabled = false,
                            UserName = "david.miller@example.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b338159e-8873-45f8-a062-0a78b4238d83",
                            CreatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4289),
                            DateOfBirth = new DateTime(1991, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lisa.moore@example.com",
                            EmailConfirmed = false,
                            FirstName = "Lisa",
                            IsDeleated = false,
                            LastName = "Moore",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4289),
                            LockoutEnabled = false,
                            MiddleName = "Marie",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33083f68-9985-4661-a40c-fb3fb922e210",
                            TwoFactorEnabled = false,
                            UserName = "lisa.moore@example.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "861c2581-cfbe-4107-8a9b-4202312e174e",
                            CreatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4296),
                            DateOfBirth = new DateTime(1975, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "james.taylor@example.com",
                            EmailConfirmed = false,
                            FirstName = "James",
                            IsDeleated = false,
                            LastName = "Taylor",
                            LastUpdatedAt = new DateTime(2025, 6, 18, 4, 44, 16, 127, DateTimeKind.Utc).AddTicks(4296),
                            LockoutEnabled = false,
                            MiddleName = "William",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63d4a84e-5265-4a89-b6dd-e031ac618cb1",
                            TwoFactorEnabled = false,
                            UserName = "james.taylor@example.com"
                        });
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.RealEstateOwnership", b =>
                {
                    b.HasOne("SIK.Infrastructure.Data.Models.RealEstate", "RealEstate")
                        .WithMany("Owners")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIK.Infrastructure.Data.Models.User", "Owner")
                        .WithMany("OwnedProperties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.Service", b =>
                {
                    b.HasOne("SIK.Infrastructure.Data.Models.RealEstate", "RealEstate")
                        .WithMany()
                        .HasForeignKey("RealEstateId");

                    b.HasOne("SIK.Infrastructure.Data.Models.User", "Signatory")
                        .WithMany("Services")
                        .HasForeignKey("SignatoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIK.Infrastructure.Data.Models.TransportAsset", "TransportAsset")
                        .WithMany()
                        .HasForeignKey("TransportAssetId");

                    b.Navigation("RealEstate");

                    b.Navigation("Signatory");

                    b.Navigation("TransportAsset");
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.TransportAsset", b =>
                {
                    b.HasOne("SIK.Infrastructure.Data.Models.User", "Owner")
                        .WithMany("TransportAssets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.RealEstate", b =>
                {
                    b.Navigation("Owners");
                });

            modelBuilder.Entity("SIK.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("OwnedProperties");

                    b.Navigation("Services");

                    b.Navigation("TransportAssets");
                });
#pragma warning restore 612, 618
        }
    }
}
